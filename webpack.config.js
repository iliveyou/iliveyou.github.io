const path = require('path')
const webpack = require('webpack')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const TerserWebpackPlugin = require('terser-webpack-plugin')
const OptimizeCSSAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const ImageminWebpackPlugin = require('imagemin-webpack-plugin').default
const HtmlWebpackPlugin = require('html-webpack-plugin')
const FaviconsWebpackPlugin = require('favicons-webpack-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')

/**
 * Base webpack configuration
 *
 * @param env -> env parameters
 * @param argv -> CLI arguments, 'argv.mode' is the current webpack mode (development | production)
 * @returns object
 */
module.exports = (env, argv = {}) => {

    let isProduction = (argv.mode === 'production');

    let baseUrl = isProduction ? 'https://iliveyou.github.io' : 'https://localhost:8080';

    let config = {

        context: path.resolve(__dirname, 'src'),

        // development server with hot-reload
        devServer: {
            host: "0.0.0.0",
            contentBase: path.join(__dirname, 'docs'),
            watchContentBase: true,
            compress: true,
            writeToDisk: true, //https://github.com/johnagan/clean-webpack-plugin/issues/96
        },

        entry: [
            './assets/js/index.js',
            './assets/scss/index.scss',
        ],

        // enable development source maps
        // * will be overwritten by 'source-maps' in production mode
        devtool: "inline-source-map",

        output: {
            filename: 'assets/js/app.js',
            path: path.resolve(__dirname, 'docs'),
            publicPath: '/'
        },

        plugins: [

            new CleanWebpackPlugin(),

            new MiniCssExtractPlugin({
                filename: 'assets/css/app.css'
            }),

            // provide jQuery and Popper.js dependencies
            new webpack.ProvidePlugin({
                $: 'jquery',
                jQuery: 'jquery',
                jquery: 'jquery',
                'window.jQuery': 'jquery',
                Popper: ['popper.js', 'default']
            }),

            // copy static assets directory
            new CopyWebpackPlugin({
                patterns: [
                    {
                        from: 'assets/img',
                        to: 'assets/img',
                        globOptions: {
                            ignore: ['**/favicon.*'],
                        },
                    },
                    /*{
                        from: 'fonts',
                        to: 'fonts',
                    },*/
                ],
            }),

            new FaviconsWebpackPlugin({
                // Your source logo (required)
                logo: './assets/img/favicon/favicon.png',

                // optional can be 'webapp' or 'light' - 'webapp' by default
                mode: 'light', //FIXME - https://stackoverflow.com/a/39206269/3929620

                // optional can be 'webapp' or 'light' - 'light' by default
                //devMode: 'light',

                // Enable caching and optionally specify the path to store cached data
                // Note: disabling caching may increase build times considerably
                //cache: true,

                // Override the publicPath option usually read from webpack configuration
                //publicPath: '/assets',

                // The directory to output the assets relative to the webpack output dir.
                // Relative string paths are allowed here ie '../public/static'. If this
                // option is not set, `prefix` is used.
                //outputPath: '../docs/assets/img/favicon',

                // Prefix path for generated assets
                prefix: 'assets/img/favicon',

                // Inject html links/metadata (requires html-webpack-plugin).
                // This option accepts arguments of different types:
                //  * boolean
                //    `false`: disables injection
                //    `true`: enables injection if that is not disabled in html-webpack-plugin
                //  * function
                //    any predicate that takes an instance of html-webpack-plugin and returns either
                //    `true` or `false` to control the injection of html metadata for the html files
                //    generated by this instance.
                //inject: true,

                // Favicons configuration options (see below)
                //favicons: {}
            }),

            // image optimization
            new ImageminWebpackPlugin({
                // disable for dev builds
                disable: !isProduction,
                test: /\.(jpe?g|png|gif)$/i,
                pngquant: {quality: ['0-70', '0-85']},
                optipng: {optimizationLevel: 9}
            }),

            //https://github.com/jantimon/html-webpack-plugin/issues/1004
            new HtmlWebpackPlugin({
                template: 'index.hbs', // input template
                filename: 'index.html', // output file
                hash: true,
                templateParameters: {
                    'baseUrl': baseUrl,
                    'title': 'ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaDescription': 'Video streaming service',
                    'metaOgTitle': 'ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaOgType': 'website',
                    'metaOgImage': baseUrl + '/assets/img/logo/logo.png',
                    'page': 'index',
                    'mode': argv.mode,
                },
            }),

            new HtmlWebpackPlugin({
                template: 'testimonial-parrocchia-monteforte.hbs', // input template
                filename: 'la-parrocchia-di-monteforte-d-alpone-pioniera-della-santa-messa-in-streaming-su-youtube-per-contrastare-il-coronavirus.html', // output file
                hash: true,
                templateParameters: {
                    'baseUrl': baseUrl,
                    'title': 'La parrocchia di Monteforte d\'Alpone pioniera della Santa Messa in streaming su youtube - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaDescription': 'La parrocchia di Monteforte d\'Alpone pioniera della Santa Messa in streaming su youtube per contrastare il coronavirus',
                    'metaOgTitle': 'La parrocchia di Monteforte d\'Alpone pioniera della Santa Messa in streaming su youtube - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaOgType': 'website',
                    'metaOgImage': baseUrl + '/assets/img/logo/logo.png',
                    'page': 'testimonial',
                    'mode': argv.mode,
                },
            }),

            new HtmlWebpackPlugin({
                template: 'testimonial-parrocchia-negrar.hbs', // input template
                filename: 'lo-streaming-automatico-della-parrocchia-di-monteforte-d-alpone-adottato-anche-dalla-parrocchia-di-s-martino-di-negrar.html', // output file
                hash: true,
                templateParameters: {
                    'baseUrl': baseUrl,
                    'title': 'Lo streaming automatico della parrocchia di Monteforte d\'Alpone adottato anche dalla parrocchia di S. Martino di Negrar - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaDescription': 'Lo streaming automatico della parrocchia di Monteforte d\'Alpone adottato anche dalla parrocchia di S. Martino di Negrar',
                    'metaOgTitle': 'Lo streaming automatico della parrocchia di Monteforte d\'Alpone adottato anche dalla parrocchia di S. Martino di Negrar - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaOgType': 'website',
                    'metaOgImage': baseUrl + '/assets/img/logo/logo.png',
                    'page': 'testimonial',
                    'mode': argv.mode,
                },
            }),

            new HtmlWebpackPlugin({
                template: 'privacy.hbs', // input template
                filename: 'privacy.html', // output file
                hash: true,
                templateParameters: {
                    'baseUrl': baseUrl,
                    'title': 'Privacy Policy - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaDescription': 'Video streaming service',
                    'metaOgTitle': 'Privacy Policy - ILIVE.YOU - Lo streaming dove vuoi tu',
                    'metaOgType': 'website',
                    'metaOgImage': baseUrl + '/assets/img/logo/logo.png',
                    'page': 'privacy',
                    'mode': argv.mode,
                },
            }),
        ],

        optimization: {
            minimizer: [
                // CSS optimizer
                new OptimizeCSSAssetsWebpackPlugin(),
                // JS optimizer by default
                new TerserWebpackPlugin(),
            ],
        },

        module: {

            rules: [
                {
                    test: /\.html$/i,
                    loader: 'html-loader'
                },

                {
                    test: /\.hbs$/,
                    loader: "handlebars-loader",
                    query: {
                        //rootRelative: path.resolve(__dirname, 'src') + '/',
                        partialDirs: [
                            path.join(__dirname, 'src', 'partials')
                        ],
                        helperDirs: [
                            path.join(__dirname, 'src', 'assets', 'js', 'helpers')
                        ],
                    }
                },

                {
                    test: /\.(sa|sc|c)ss$/,
                    use: [
                        MiniCssExtractPlugin.loader,
                        "css-loader",
                        "sass-loader"
                    ],
                },

                {
                    test: /\.(png|jpe?g|gif)$/,
                    loaders: [
                        {
                            loader: "file-loader",
                            options: {
                                name(resourcePath, resourceQuery) {
                                    // `resourcePath` - `/absolute/path/to/file.js`
                                    // `resourceQuery` - `?foo=bar`

                                    if (/node_modules/.test(resourcePath)) {

                                        const relativePath = path.relative('node_modules', resourcePath);

                                        return 'assets/img/lib/' + relativePath + '[name].[ext]';
                                    }

                                    return "[path][name].[ext]";
                                },
                                //https://stackoverflow.com/a/59075858/3929620
                                esModule: false,
                            }
                        }
                    ],
                },

                {
                    test: /\.(woff|woff2|eot|ttf|otf)$/,
                    use: [
                        {
                            loader: "file-loader",
                            options: {
                                name: "assets/fonts/[name].[ext]"
                            }
                        },
                    ],
                },

                // svg inline 'data:image' loader
                {
                    test: /\.svg$/,
                    loader: "svg-url-loader"
                },
            ]
        }
    }

    return config;
};
